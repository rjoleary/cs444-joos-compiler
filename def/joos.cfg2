# This grammar will conform to Joos 1W and is LALR(1).
#
# This file has the following format:
#
# 1. Blank lines and lines starting with '#' are ignored.
# 2. Productions start with a non-terminal and are followed by 0 or more terminals.
# 3. The root of the syntax tree is S.
#
# The JLS2 grammar has more features and I will explain how to convert them:
#
# 1. [x] denotes zero or one occurances of x
#
#    Before:
#
#      Expression:
#          Expression1 [AssignmentOperator Expression1]
#
#    After:
#
#      Expression    Expression1
#      Expression    Expression1 AssignmentOperator Expression1
#
# 2. {x} denotes zero or more occurances of x
#
#    Before:
#
#      Type:
#          Identifier { . Identifier } BracketsOpt
#          BasicType
#
#    After:
#
#      Type    Identifier Type' BracketsOpt
#      Type    BasicType
#      Type'   . Identifier Type'
#      Type'
#
# 3. x|y means one of either x or y
#
#    Before:
#
#      ClassOrInterfaceDeclaration:
#          ModifiersOpt ( ClassDeclaration | InterfaceDeclaration )
#
#    After:
#
#      ClassOrInterfaceDeclaration    ModifiersOpt ClassDeclaration
#      ClassOrInterfaceDeclaration    ModifiersOpt InterfaceDeclaration
#

########## Tree Root
# The JLS2 calls this the "goal symbol".

S                       BOF CompilationUnit EOF


########## 4.1: The Kinds of Types and Values
# Joos 1W does not support float, long, octal and hex literals.

Literal                 IntegerLiteral
Literal                 BooleanLiteral
Literal                 CharacterLiteral
Literal                 StringLiteral
Literal                 NullLiteral


########## 4.1: The Kinds of Types and Values

Type                    PrimitiveType
Type                    ReferenceType


########## 4.2: Primitive Types and Values
# JLS 1W only has: boolean, int, char, byte and short

PrimitiveType           NumericType
PrimitiveType           boolean

NumericType             IntegralType

IntegralType            byte
IntegralType            short
IntegralType            int
IntegralType            char


########## 4.3: Reference Types and Values
# The JLS2 spec had some ambiguity for ClassOrInterfaceType. It has been
# simplified to Name.

ReferenceType           ClassOrInterfaceType
ReferenceType           ArrayType

ClassOrInterfaceType    Name

ClassType               Name

InterfaceType           Name

ArrayType               Type [ ]


########## 6.5: Determining the Meaning of a Name
# Name can be a PackageName, TypeName, ExpressionName, MethodName or
# AmbiguousName. Determing which one during parse leads to too many
# ambiguities, so they are are all under one umbrella production called Name.

Name                    Identifier
Name                    Name . Identifier


########## 7.3: Compilation Units
# Joos 1W supports only one type per file.

CompilationUnit
CompilationUnit         PackageDeclaration
CompilationUnit         PackageDeclaration ImportDeclarations
CompilationUnit         PackageDeclaration ImportDeclarations TypeDeclaration
CompilationUnit         PackageDeclaration TypeDeclaration
CompilationUnit         ImportDeclarations
CompilationUnit         ImportDeclarations TypeDeclaration
CompilationUnit         TypeDeclaration

ImportDeclarations      ImportDeclaration
ImportDeclarations      ImportDeclarations ImportDeclaration


########## 7.4.1: Named Packages

PackageDeclaration      package Name ;


########## 7.5: Import Declarations

ImportDeclaration       SingleTypeImportDeclaration
ImportDeclaration       TypeImportOnDemandDeclaration

SingleTypeImportDeclaration     import Name ;

TypeImportOnDemandDeclaration   import Name . * ;


########## 7.6: Top Level Type Declarations

TypeDeclaration         ClassDeclaration
TypeDeclaration         InterfaceDeclaration
TypeDeclaration         ;


########## 8.1: Class Declaration
# Joos 1W classes cannot be package private.

ClassDeclaration        Modifiers class Identifier ClassBody
ClassDeclaration        Modifiers class Identifier Super ClassBody
ClassDeclaration        Modifiers class Identifier Super Interfaces ClassBody
ClassDeclaration        Modifiers class Identifier Interfaces ClassBody


########## 8.1.1: Class Modifiers
# See 8.3.1: Field Modifiers


########## 8.1.3: Superclasses and Subclasses

Super                   extends ClassType


########## 8.1.4: Superinterfaces

Interfaces              implements InterfaceTypeList

InterfaceTypeList       InterfaceType
InterfaceTypeList       InterfaceTypeList , InterfaceType


########## 8.1.5: Class Body and Member Declarations

ClassBody               { }
ClassBody               { ClassBodyDeclarations }

ClassBodyDeclarations   ClassBodyDeclaration
ClassBodyDeclarations   ClassBodyDeclarations ClassBodyDeclaration

ClassBodyDeclaration    ClassMemberDeclaration
ClassBodyDeclaration    ConstructorDeclaration

ClassMemberDeclaration  FieldDeclaration
ClassMemberDeclaration  MethodDeclaration
ClassMemberDeclaration  ;


########## 8.3: Field Declarations
# Joos 1W does not support array data.
# Joos 1W does not support multiple variables per declaration.

FieldDeclaration        Type VariableDeclarator ;
FieldDeclaration        Modifiers Type VariableDeclarator ;

VariableDeclarator      VariableDeclaratorId
VariableDeclarator      VariableDeclaratorId = VariableInitializer

VariableDeclaratorId    Identifier
VariableDeclaratorId    VariableDeclaratorId [ ]

VariableInitializer     Expression


########## 8.3.1: Field Modifiers
# While generating an LR(1) grammar, Joos 1W causes a reduce-reduce conflict on
# the rules FieldModifiers, MethodModifiers and ConstructorModifiers. To
# resolve this conflict, all three rules have been merged into Modifiers and
# additional checking is done in the weeder.
#
# The following must be checked by the weeder:
# * Fields support: public, protected and static
# * Methods support: public, protected, final, abstract and static
# * Constructors support: public and protected
#
# Similarly, there is a reduce-reduce conflict on the rules ClassModifiers and
# InterfaceModifiers. The following must be checked by the weeder:
# * Class support: public, abstract, static and final
#   TODO: Does joos really have static classes?
# * Interace support: public and abstract

Modifiers              Modifier
Modifiers              Modifiers Modifier

Modifier               public
Modifier               protected
Modifier               final
Modifier               abstract
Modifier               static
Modifier               native


########## 8.4: Method Declarations

MethodDeclaration       MethodHeader MethodBody

MethodHeader            Type MethodDeclarator
MethodHeader            Modifiers Type MethodDeclarator

Type                    void

MethodDeclarator        Identifier ( )
MethodDeclarator        Identifier ( FormalParameterList )


########## 8.4.1: Formal Parameters
# Joos 1W does not support final formal parameters.

FormalParameterList     FormalParameter
FormalParameterList     FormalParameterList , FormalParameter

FormalParameter         Type VariableDeclaratorId


########## 8.4.3: Method Modifiers
# See 8.3.1: Field Modifiers


########## 8.4.5: Method Body

MethodBody              Block
MethodBody              ;


########## 8.8: Constructor Declaration
# TODO: The weeder must check that Identifier is the name of the class.

ConstructorDeclaration  Modifiers ConstructorDeclarator ConstructorBody

ConstructorDeclarator   Identifier ( )
ConstructorDeclarator   Identifier ( FormalParameterList )


########## 8.8.3: Constructor Modifiers
# See 8.3.1: Field Modifiers


########## 8.8.5: Constructor Body
# Joos 1W does not support constructor this or super call.

ConstructorBody         { }
ConstructorBody         { BlockStatements }


########## 9.1: Interface Declarations
# Joos 1W interfaces cannot be package private.

InterfaceDeclaration    Modifiers interface Identifier InterfaceBody
InterfaceDeclaration    Modifiers interface Identifier ExtendsInterfaces InterfaceBody


########## 9.1.1: Interface Modifiers
# See 8.3.1: Field Modifiers


########## 9.1.2: Superinterfaces and Subinterfaces

ExtendsInterfaces       extends InterfaceType
ExtendsInterfaces       ExtendsInterfaces , InterfaceType


########## 9.1.3: Interface Body and Member Declarations
# Joos 1W does not have interface constants.

InterfaceBody           { }
InterfaceBody           { InterfaceMemberDeclarations }

InterfaceMemberDeclarations     InterfaceMemberDeclaration
InterfaceMemberDeclarations     InterfaceMemberDeclarations InterfaceMemberDeclaration

InterfaceMemberDeclaration      AbstractMethodDeclaration
InterfaceMemberDeclaration      ;


########## 9.4: Abstract Method Declarations

AbstractMethodDeclaration       Type MethodDeclarator ;
AbstractMethodDeclaration       Modifiers Type MethodDeclarator ;


########## 14.2. Blocks
# Joos 1W does not support local class declarations.

Block                   { }
Block                   { BlockStatements }

BlockStatements         BlockStatement
BlockStatements         BlockStatements BlockStatement

BlockStatement          LocalVariableDeclarationStatement
BlockStatement          Statement


########## 14.4: Local Variable Declaration Statements
# Joos 1W does not support local finals.

LocalVariableDeclarationStatement   LocalVariableDeclaration
LocalVariableDeclaration            Type VariableDeclarator


########## 14.5: Statements
# Joos 1W does not support:
# * do-while
# * break
# * continue
# * switch
# * labeled statements
# * synchronized statement

Statement               StatementWithoutTrailingSubstatement
Statement               IfThenStatement
Statement               IfThenElseStatement
Statement               WhileStatement
Statement               ForStatement

StatementWithoutTrailingSubstatement    Block
StatementWithoutTrailingSubstatement    EmptyStatement
StatementWithoutTrailingSubstatement    ExpressionStatement
StatementWithoutTrailingSubstatement    ReturnStatement

StatementNoShortIf      StatementWithoutTrailingSubstatement
StatementNoShortIf      IfThenElseStatementNoShortIf
StatementNoShortIf      WhileStatementNoShortIf
StatementNoShortIf      ForStatementNoShortIf


########## 14.6: The Empty Statement

EmptyStatement          ;


########## 14.8: Expression Statements
# Joos 1W does not support:
# * {pre,post}{increment,decrement}

ExpressionStatement     StatementExpression ;

StatementExpression     Assignment
StatementExpression     MethodInvocation
StatementExpression     ClassInstanceCreationExpression


########## 14.9: The if Statement
# This solves the dangling else problem.

IfThenStatement                 if ( Expression ) Statement
IfThenElseStatement             if ( Expression ) StatementNoShortIf else Statement
IfThenElseStatementNoShortIf    if ( Expression ) StatementNoShortIf else StatementNoShortIf


########## 14.11: The while Statement

WhileStatement          while ( Expression ) Statement

WhileStatementNoShortIf while ( Expression ) StatementNoShortIf


########## 14.13: The for Statement
# Joos 1W only support for loops without expression lists.

ForStatement            for ( ; ; ) Statement
ForStatement            for ( ForInit ; ; ) Statement
ForStatement            for ( ; Expression ; ) Statement
ForStatement            for ( ForInit ; Expression ; ) Statement
ForStatement            for ( ; ; ForUpdate ) Statement
ForStatement            for ( ForInit ; ; ForUpdate ) Statement
ForStatement            for ( ; Expression ; ForUpdate ) Statement
ForStatement            for ( ForInit ; Expression ; ForUpdate ) Statement

ForStatementNoShortIf   for ( ; ; ) StatementNoShortIf
ForStatementNoShortIf   for ( ForInit ; ; ) StatementNoShortIf
ForStatementNoShortIf   for ( ; Expression ; ) StatementNoShortIf
ForStatementNoShortIf   for ( ForInit ; Expression ; ) StatementNoShortIf
ForStatementNoShortIf   for ( ; ; ForUpdate ) StatementNoShortIf
ForStatementNoShortIf   for ( ForInit ; ; ForUpdate ) StatementNoShortIf
ForStatementNoShortIf   for ( ; Expression ; ForUpdate ) StatementNoShortIf
ForStatementNoShortIf   for ( ForInit ; Expression ; ForUpdate ) StatementNoShortIf

ForInit                 StatementExpression
ForInit                 LocalVariableDeclaration

ForUpdate               StatementExpression


########## 14.16: The return Statement

ReturnStatement         return ;
ReturnStatement         return Expression ;


########## 15.8: Primary Expressions
# Joos 1W does not support:
# * array data
# * class literals
# * bitwise operations
# * assignment operations
# * unary plus
# * choice
# * bit shift

Primary                 Literal
Primary                 this
Primary                 ( Expression )
Primary                 ClassInstanceCreationExpression
Primary                 FieldAccess
# TODO(causes conflict): Primary                 MethodInvocation
Primary                 ArrayAccess


########## 15.9: Class Instance Creation Expressions
# Joos 1W does not have nested types.
# TODO: be able to create new arrays.

ClassInstanceCreationExpression     new ClassOrInterfaceType ( )
ClassInstanceCreationExpression     new ClassOrInterfaceType ( ArgumentList )

ArgumentList            Expression
ArgumentList            ArgumentList , Expression


########## 15.11: Field Access Expressions
# Joos 1W does not have super field access.

FieldAccess             Primary . Identifier


########## 15.12: Method Invocation Expressions

MethodInvocation        Name ( )
MethodInvocation        Name ( ArgumentList )
MethodInvocation        Primary . Identifier ( )
MethodInvocation        Primary . Identifier ( ArgumentList )


########## 15.13: Array Access Expressions

# TODO(causes conflict): ArrayAccess             Name [ Expression ]
ArrayAccess             Primary [ Expression ]


########## 15.15: Unary Operators
# Joos 1W does not support unary plus or {pre,post}{increment,decrement}.

UnaryExpression         - UnaryExpression
UnaryExpression         UnaryExpressionNotPlusMinus

UnaryExpressionNotPlusMinus     Primary
UnaryExpressionNotPlusMinus     Name
UnaryExpressionNotPlusMinus     ! UnaryExpression
UnaryExpressionNotPlusMinus     CastExpression


########## 15.16: Cast Expressions
# TODO: what is Dims?

CastExpression          ( PrimitiveType ) UnaryExpression
CastExpression          ( PrimitiveType Dims ) UnaryExpression
# TODO(causes conflict): CastExpression          ( ReferenceType ) UnaryExpressionNotPlusMinus


########## 15.17: Multiplicative Operators

MultiplicativeExpression       UnaryExpression
MultiplicativeExpression       MultiplicativeExpression * UnaryExpression
MultiplicativeExpression       MultiplicativeExpression / UnaryExpression
MultiplicativeExpression       MultiplicativeExpression % UnaryExpression


########## 15.18: Additive Operators

AdditiveExpression      MultiplicativeExpression
AdditiveExpression      AdditiveExpression + MultiplicativeExpression
AdditiveExpression      AdditiveExpression - MultiplicativeExpression


########## 15.20: Relational Operators

RelationalExpression    AdditiveExpression
RelationalExpression    RelationalExpression < AdditiveExpression
RelationalExpression    RelationalExpression > AdditiveExpression
RelationalExpression    RelationalExpression <= AdditiveExpression
RelationalExpression    RelationalExpression >= AdditiveExpression
RelationalExpression    RelationalExpression instanceof AdditiveExpression


########## 15.21: Equality Operators

EqualityExpression      RelationalExpression
EqualityExpression      EqualityExpression == RelationalExpression
EqualityExpression      EqualityExpression != RelationalExpression


########## 15.22: Bitwise and Logical Operators

AndExpression           EqualityExpression
AndExpression           AndExpression & EqualityExpression

ExclusiveOrExpression   AndExpression
ExclusiveOrExpression   ExclusiveOrExpression ^ AndExpression

InclusiveOrExpression   ExclusiveOrExpression
InclusiveOrExpression   InclusiveOrExpression | ExclusiveOrExpression


########## 15.23: Conditional-And Operator &&

ConditionalAndExpression    InclusiveOrExpression
ConditionalAndExpression    ConditionalAndExpression && InclusiveOrExpression


########## 15.24: Conditional-Or Operator ||

ConditionalOrExpression     ConditionalAndExpression
ConditionalOrExpression     ConditionalOrExpression || ConditionalAndExpression


########## 15.26: Assignment Operators

AssignmentExpression    Assignment
AssignmentExpression    ConditionalOrExpression

Assignment              Name = AssignmentExpression
Assignment              FieldAccess = AssignmentExpression
Assignment              ArrayAccess = AssignmentExpression


########## 15.27: Expression

Expression              AssignmentExpression
